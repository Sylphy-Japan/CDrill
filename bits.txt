○リテラル
・10進数（普通の数）→ int x = 42;
・16進数（0x） → int x = 0x2A; // 16進数 2A → 10進で42
・8進数（0で始める）→　int x = 052;  // 8進数52 → 10進で42
・2進数　→　int x = 0b101010; // 2進数 (gcc/clang/msvcの拡張)

○ 基本の演算子
・&  AND (両方1なら1)      1101 & 1011 = 1001
・|	 OR  (どちらか1なら1)  1101 & 1011 = 1111
・^  XOR (異なると1)       1101 ^ 1011 = 0110
・~  NOT (ビット反転)      ~0101         1010 (補数表現に注意)
・<< 左シフト              5 << 1     = 1010b = 10
・>> 右シフト              20 >> 2  0101b = 5




○マスク操作（部分的にビットをいじる）
・特定のビットを取り出す
	if (x & (1 << k)) { ... }   // kビット目が1かどうか

・特定のビットをセット（1にする）
	x |= (1 << k);

・特定のビットをクリア（0にする）
	x &= ~(1 << k);

・特定のビットをトグル（反転する）
	x ^= (1 << k);


